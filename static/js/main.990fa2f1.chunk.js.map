{"version":3,"sources":["components/title.js","components/input.js","components/task.js","components/task-list.js","components/layout.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","aria-label","role","Input","props","onSubmit","handleSubmit","value","onChange","handleTaskChange","type","Task","onClick","handleDelete","id","TaskList","tasks","map","task","key","Layout","children","App","event","setState","newTask","target","preventDefault","newTasks","state","push","splice","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAceA,MAXf,WACE,OACE,wBAAIC,UAAU,SAAd,aACa,IACX,0BAAMC,aAAW,QAAQC,KAAK,OAA9B,kBCMSC,MAZf,SAAeC,GACb,OACE,0BAAMC,SAAUD,EAAME,cACpB,2BACEC,MAAOH,EAAMG,MACbC,SAAUJ,EAAMK,iBAChBC,KAAK,OACLV,UAAU,eCQHW,MAff,SAAcP,GACZ,OACE,yBAAKJ,UAAU,kBACb,wBAAIA,UAAU,QAAQI,EAAMG,OAC5B,yBAAKP,UAAU,oBACb,4BACEY,QAAS,WAAOR,EAAMS,aAAaT,EAAMU,KACzCd,UAAU,iBAFZ,QCUOe,MAdf,SAAkBX,GAChB,OACA,kBAAC,WAAD,KACGA,EAAMY,MAAMC,KAAI,SAACC,EAAMJ,GAAP,OACf,kBAAC,EAAD,CACEK,IAAKL,EACLA,GAAIA,EACJD,aAAcT,EAAMS,aACpBN,MAAOW,SCFAE,MAPf,SAAgBhB,GACd,OACA,yBAAKJ,UAAU,aACZI,EAAMiB,WCsDIC,E,YAlDb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAORK,iBAAmB,SAAAc,GACjB,EAAKC,SAAS,CACZC,QAASF,EAAMG,OAAOnB,SAVP,EAcnBD,aAAe,SAAAiB,GACbA,EAAMI,iBACN,IAAIC,EAAW,EAAKC,MAAMb,MAC1BY,EAASE,KAAK,EAAKD,MAAMJ,SACzB,EAAKD,SAAS,CACZC,QAAS,GACTT,MAAOY,KApBQ,EAwBnBf,aAAe,SAACC,GACd,IAAIc,EAAW,EAAKC,MAAMb,MAC1BY,EAASG,OAAOjB,EAAI,GACpB,EAAKU,SAAS,CACZR,MAAOY,KA1BT,EAAKC,MAAQ,CACXJ,QAAS,GACTT,MAAO,IAJQ,E,sEAiCjB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEV,aAAc0B,KAAK1B,aACnBG,iBAAkBuB,KAAKvB,iBACvBF,MAAOyB,KAAKH,MAAMJ,UAEpB,kBAAC,EAAD,CACET,MAAOgB,KAAKH,MAAMb,MAClBH,aAAcmB,KAAKnB,oB,GA5CXoB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.990fa2f1.chunk.js","sourcesContent":["  \r\nimport React from \"react\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <h1 className=\"title\">\r\n      To do list{\" \"}\r\n      <span aria-label=\"emoji\" role=\"img\">\r\n        ðŸ”¥\r\n      </span>\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nfunction Input(props) {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <input\r\n        value={props.value}\r\n        onChange={props.handleTaskChange}\r\n        type=\"text\"\r\n        className=\"new-task\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\nexport default Input","import React from 'react';\r\nfunction Task(props) {\r\n  return (\r\n    <div className=\"task-container\">\r\n      <h3 className=\"task\">{props.value}</h3>\r\n      <div className=\"button-container\">\r\n        <button\r\n          onClick={() => {props.handleDelete(props.id)}}\r\n          className=\"delete-button\"\r\n        >\r\n        X\r\n        </button>\r\n      </div>\r\n   </div>\r\n  );\r\n}\r\nexport default Task;","import React, { Fragment } from 'react';\r\nimport Task from './task'\r\nfunction TaskList(props){\r\n  return(\r\n  <Fragment>\r\n    {props.tasks.map((task, id) =>\r\n      <Task \r\n        key={id}\r\n        id={id}\r\n        handleDelete={props.handleDelete}\r\n        value={task}\r\n      />\r\n    )}\r\n  </Fragment>\r\n )\r\n}\r\nexport default TaskList;","import React from 'react';\r\nfunction Layout(props){\r\n  return(\r\n  <div className=\"container\">\r\n    {props.children}\r\n  </div>\r\n  )\r\n}\r\nexport default Layout;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Title from './components/title';\nimport Input from './components/input';\nimport TaskList from './components/task-list';\nimport Layout from './components/layout';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTask: \"\",\n      tasks: []\n    };\n  }\n\n  handleTaskChange = event => {\n    this.setState({\n      newTask: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let newTasks = this.state.tasks;\n    newTasks.push(this.state.newTask);\n    this.setState({\n      newTask: \"\",\n      tasks: newTasks\n    });\n  };\n\n  handleDelete = (id) => {\n    let newTasks = this.state.tasks;\n    newTasks.splice(id, 1)\n    this.setState({\n      tasks: newTasks,\n    })\n  }\n\n  render() {\n    return (\n      <Layout>\n        <Title/>\n        <Input \n          handleSubmit={this.handleSubmit}\n          handleTaskChange={this.handleTaskChange}\n          value={this.state.newTask}\n        />\n        <TaskList \n          tasks={this.state.tasks}\n          handleDelete={this.handleDelete}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}